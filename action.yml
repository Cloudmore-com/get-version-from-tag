name: Set variables
description: Set some useful variables
inputs:
  release_production_tag:
    description: Release-production latest tag
    default: release-production-eu
    required: true
outputs:
  prodVersion:
    description: Current production version
    value: ${{ steps.version.outputs.prodVersion }}
  masterVersion:
    description: Master version. must be higher than current prod
    value: ${{ steps.version.outputs.masterVersion }}
  hotfixVersion:
    description: Hotfix version for current prod version
    value: ${{ steps.version.outputs.hotfixVersion }}
runs:
  using: composite
  steps:
    - uses: actions/github-script@v5
      name: Set version
      id: version
      with:
        script: |
          const releaseProductionTagName = '${{ inputs.release_production_tag }}'
          const owner = context.repo.owner
          const repo = context.repo.repo
          const allTags = await github.rest.repos.listTags({ owner, repo });
          const branches = await github.rest.repos.listBranches({ owner, repo })
          const getVersionArr = (str) => {
            try{
              const versionStr = str.match(/(\d{1,3}.\d{1,3}.\d{1,3})/)[0]
              return versionStr.split('.')
            } catch {
              console.log('String does not contain version:',str)
              return false
            }
          }
          const sortVersions = (a,b) => (getVersionArr(b.name).join('') - getVersionArr(a.name).join(''))
          console.log('1')
          const getLatestDeployedReleaseTag = (arr,sha,name) => {
            const onlyTagsWithVersions = arr.filter(t => getVersionArr(t.name) && (t.commit.sha == sha) && (t.name != name) )
            return onlyTagsWithVersions.sort(sortVersions)[0]
          }
          console.log('2')

          const HighestVersionReleaseBranch = branches.data.filter((br) => {
            console.log('test branch',br.name)
            const result = getVersionArr(br.name) && br.name.includes('release-')
            if (result){
              console.log('filter result',result)
            }
            return result
          }).sort(sortVersions)[0]
          console.log('3')
          console.log('HighestVersionReleaseBranch',HighestVersionReleaseBranch)
          const [m1,m2,m3] = getVersionArr(HighestVersionReleaseBranch.name)
          console.log('4')
          const masterVersion = [m1,+m2 + 1, 0].join('.')

          const releaseProductionTag = allTags.data.find(t => t.name == releaseProductionTagName)
          const latestDeployedReleaseTag = getLatestDeployedReleaseTag(allTags.data,releaseProductionTag.commit.sha,releaseProductionTag.name)
          console.log('latestDeployedReleaseTag',latestDeployedReleaseTag)
          const [a,b,c] = getVersionArr(latestDeployedReleaseTag.name)
          const prodVersion = [a,b,c].join('.')
          const hotfixVersion = [a,b,+c + 1].join('.')

          console.log('masterVersion',masterVersion)
          console.log('prodVersion',prodVersion)
          console.log('hotfixVersion',hotfixVersion)
          console.log(`::set-output name=prodVersion::${prodVersion}`)
          console.log(`::set-output name=masterVersion::${masterVersion}`)
          console.log(`::set-output name=hotfixVersion::${hotfixVersion}`)
