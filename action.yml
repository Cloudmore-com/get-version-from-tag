name: Set variables
description: Set some useful variables
inputs:
  release_production_tag:
    description: Release-production latest tag
    default: release-production-eu
    required: true
outputs:
  prodVersion:
    description: Current production version
    value: ${{ steps.version.outputs.prodVersion }}
  masterVersion:
    description: Master version. must be higher than current prod
    value: ${{ steps.version.outputs.masterVersion }}
  hotfixVersion:
    description: Hotfix version for current prod version
    value: ${{ steps.version.outputs.hotfixVersion }}
  latestDeployedReleaseTag:
    description: Current production release Tag
    value: ${{ steps.version.outputs.latestDeployedReleaseTag }}
  currentReleaseVersion:
    description: Current release version
    value: ${{ steps.version.outputs.currentReleaseVersion }}
  highestCandidateBranch:
    description: Highest candidate branch name
    value: ${{ steps.version.outputs.highestCandidateBranch }}

runs:
  using: composite
  steps:
    - uses: actions/github-script@v5
      name: Set version
      id: version
      with:
        script: |
          const releaseProductionTagName = '${{ inputs.release_production_tag }}'
          const owner = context.repo.owner
          const repo = context.repo.repo
          const allTags = await github.rest.repos.listTags({ owner, repo, per_page: 100 });
          const allReleases = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });

          const isPreRelease = (releases, release_tag_name) => {
           const release = releases.find((r) => r.tag_name === release_tag_name)
           if (release && 'prerelease' in release) return release.prerelease
           return false
          }

          const branches = await github.paginate(
            github.rest.repos.listBranches,
            { owner, repo }
          )

          console.log('total branches', branches.length )

          const getVersionArr = (str) => {
            try{
              const versionStr = str.match(/(\d{1,3}.\d{1,3}.\d{1,3})/)[0]
              return versionStr.split('.')
            } catch {
              console.log('String does not contain version:',str)
              return false
            }
          }
          const sortVersions = (a,b) => (getVersionArr(b.name).join('') - getVersionArr(a.name).join(''))

          const getLatestDeployedReleaseTag = (tags,production_tag_sha,name) => {
            const result = tags.filter(t => {
              return getVersionArr(t.name) && (t.commit.sha == production_tag_sha) && (t.name != name)
            })
            if (!result.length) {
              console.error('!!! ERROR: Cannot find latest deployed release or hotfix tag. Please check that release-production tag sha and deployed release tag are the same.')
            }
            return result.sort(sortVersions)[0]
          }

          const highestVersionReleaseBranch = branches.filter(br => br.name.includes('release-') && getVersionArr(br.name) ).sort(sortVersions)[0]

          const highestCandidateBranch = branches.filter(br => (br.name.includes('release-') || br.name.includes('hotfix-')) && getVersionArr(br.name) && isPreRelease(allReleases.data, br.name) ).sort(sortVersions)[0]

          console.log('highestVersionReleaseBranch:',highestVersionReleaseBranch.name)
          const [m1,m2,m3] = getVersionArr(highestVersionReleaseBranch.name)
          const currentReleaseVersion = [m1,m2,m3].join('.')
          const masterVersion = [m1,+m2 + 1, 0].join('.')
          console.log('masterVersion',masterVersion)

          const releaseProductionTag = allTags.data.find(t => t.name == releaseProductionTagName)
          console.log('releaseProductionTag',releaseProductionTag)
        
          const latestDeployedReleaseTag = getLatestDeployedReleaseTag(allTags.data,releaseProductionTag.commit.sha,releaseProductionTag.name)
          console.log('latestDeployedReleaseTag:',latestDeployedReleaseTag.name)
      
          const [a,b,c] = getVersionArr(latestDeployedReleaseTag.name)
          const prodVersion = [a,b,c].join('.')
          const hotfixVersion = [a,b,+c + 1].join('.')

          console.log('prodVersion',prodVersion)
          console.log('hotfixVersion',hotfixVersion)
          console.log('currentReleaseVersion',currentReleaseVersion)
          console.log('highestCandidateBranch',highestCandidateBranch.name)
          //console.log(`::set-output name=prodVersion::${prodVersion}`)
          //console.log(`::set-output name=masterVersion::${masterVersion}`)
          //console.log(`::set-output name=hotfixVersion::${hotfixVersion}`)
          //console.log(`hotfixVersion=${hotfixVersion} >> \$GITHUB_OUTPUT`)
          fs.writeFileSync(process.env.GITHUB_OUTPUT, `hotfixVersion=${hotfixVersion}`);
          //console.log(`::set-output name=currentReleaseVersion::${currentReleaseVersion}`)
          console.log(`echo "latestDeployedReleaseTag=${latestDeployedReleaseTag.name}" >> $GITHUB_OUTPUT`)
          console.log(`::set-output name=highestCandidateBranch::${highestCandidateBranch.name}`)